//1.栈的顺序存储结构，顺序表类
#include<iostream.h>
#include<conio.h>
#include <iomanip.h>
//------------------------------栈的顺序存储结构---------------------------------------------
typedef int  ElemType;     // 数据元素的类型
const int MAXSIZE=3;     // 数组的容量
class SqStack
  { private:
      ElemType  elem[MAXSIZE];
      int top;
    public:
      SqStack( void);
      ~SqStack(){};
      int  SqStack::SetEmpty();
      void  SqStack::push(  ElemType e);
      ElemType SqStack::pop();
      void SqStack::PrintOut();
     int SqStack::IsEmpty(void)const ;    
};
//-------------------------------------------------------------
SqStack::SqStack( void):top(0){ }
int  SqStack::SetEmpty()
{ return top==0;
   }

void  SqStack::push( ElemType e)
{ 
	if(MAXSIZE!=top){
	elem[top++]=e;
	cout<<"入栈成功"<<endl;
	}
}
ElemType SqStack::pop()
{
//将此成员函数补充完整，使得程序能够正确运行

	if(!IsEmpty()){
	ElemType e;
	e=elem[--top];
		return e;
	}
}
//将此成员函数补充完整，使得程序能够正确运行}
void SqStack::PrintOut()
  {int k;
   cout<<"\n PrintOut Data:\n" ;
   for(k=top-1; k>=0;k--) cout<<setw(6)<<elem[k];
   cout<<endl;
 }
int SqStack::IsEmpty(void)const
{ if(top==0) return 1;
     else return 0;
 }
//---------------------------------------------------------------------------
int main(int argc, char* argv[])
{ int i,k;
  ElemType e,x;
  SqStack  as;
   cout<<"\n                           栈的顺序存储结构实现";
  do{
    cout<<"\n\n";
    cout<<"\n\n    1.插入一个数据元素e（入栈）";
    cout<<"\n\n    2.删除一个元素，返回其值（出栈）";
    cout<<"\n\n    3..结束程序";
    cout<<"\n******************************** ";
    cout<<"\n    请输入你的选择(1,2,3,4,5,6)";    cin>>k;
    switch(k){
       case 1:{cout<<"\n 入栈，数据 e=?";
               cin>>e;
               as.push(e);
               as.PrintOut();
              }break;
       case 2:{  cout<<"\n 出栈";
                 x=as.pop();
                 cout<<"\n  出栈元素数值= "<<x;
                  as.PrintOut();
             }break;
       default:break;
         } //switch
     cout<<"\n--------------------------------- ";
    }while(k>=1&&k<3);
  cout<<"\n          再见!";
  cout<<"\n     按任意键，返回。";
  _getch(); return 0;
}
//-----------------------------------------------





2．队列的顺序存储结构及实现C++语言源程序。
//---------------------------------------------------------------------------
#include <iostream.h>
#include <conio.h>
#define MAXSIZE 3
typedef int ElemType;
 class SeQueue
  {  private:
       ElemType elem[MAXSIZE];
        int front,rear;
     public:
        SeQueue();
        ~SeQueue();
        void Display();
        void AddQ(ElemType x);
        ElemType DelQ();
};
SeQueue::SeQueue()
  {  front=0;
     rear=0;
     cout<<"init!"<<endl;
  }
SeQueue::~SeQueue()
{};//{ delete [MAXSIZE]Q.elem;}
void SeQueue::Display()
    { ElemType x; int j=0;
      if(rear==front)
            {cout<<"QUEUE IS FULL!";}
      else{j=front;while(j!=rear)
          {x=elem[j];cout<<x<<" ";j=(j+1)%MAXSIZE;}
          }cout<<endl;
    }
void SeQueue::AddQ(ElemType x)
{ 
	//将此成员函数补充完整，使得程序能够正确运行
	if((rear+1) % MAXSIZE == front)
	cout<<"队列已满"<<endl;

	else
{
		elem [rear]= x;
		rear=(rear+1) % MAXSIZE;
		cout<<"入队成功！"<<endl;
	}
	
 }
 ElemType SeQueue::DelQ()
 {
	 //将此成员函数补充完整，使得程序能够正确运行
	ElemType x;
	 if(front == rear){
	 cout<<"队列为空"<<endl;
	 return -1;
}
	 else
{
		x = elem[front];
		front = (front +1)% MAXSIZE;
		cout<<"出队成功！"<<endl;
		return x;
	 }	
 
 }
int main(  )
{  ElemType x;  int j;
   SeQueue h;
   int k;
   cout<<"\n                           队列存储结构演示";
  do{
    cout<<"\n\n";
    cout<<"\n\n    1.初步建立一个队列";
    cout<<"\n\n    2.输出整个队列";
    cout<<"\n\n    3.入队";
    cout<<"\n\n    4.出队";
    cout<<"\n\n    5.结束程序";
    cout<<"\n******************************** ";
    cout<<"\n    请输入你的选择(1,2,3,4,5)";
    cin>>k;
    switch(k){
       case 1:{SeQueue::SeQueue();
              }break;
       case 2:{h.Display();
              }break;
       case 3:{
                cout<< "进队  data=?";  cin>>x;
                h.AddQ(x);
                h.Display();
               }break;
       case 4:{   x=h.DelQ();
                 if(x!=-1)
                 cout<< "出队的结点值是："<<x<<endl;
                 h.Display();
                }break;
       default:break;
         }
       cout<<"\n--------------------------------- ";
    }while(k>=1&&k<5);
  cout<<"\n          再见!";
  cout<<"\n     按任意键，返回。";
     _getch(); return 0;
}
